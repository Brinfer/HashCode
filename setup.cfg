# see https://setuptools.pypa.io/en/latest/index.html

############################################## Linter #############################################

# Flake8 is a wrapper around these tools: PyFlakes, pycodestyle and Ned Batchelder's McCabe script, see https://github.com/PyCQA/flake8
[flake8]
doctests = true
count = true
statistics = true
exclude =
    .git/*,
    __pycache__/*,
    venv/*
max-complexity = 10
max-line-length = 120
docstring-convention = numpy
import-order-style = pep8
extend-select  = B,B9,I,N,S,R
    # Extend the list of error codes reported by Flake8
    # B like bugbear, the flake8-bugbear plugin helps you find various bugs and design problems, see https://github.com/PyCQA/flake8-bugbear
    # B9 for more bugbear opinionated warnings, which are disabled by default.
    # I like import : flake8-import-order plugin checks that import statements are grouped and ordered, see https://github.com/PyCQA/flake8-import-order
    # N like naming : pep8-naming plugin check your code against PEP 8 naming conventions., see https://github.com/PyCQA/pep8-naming and https://www.python.org/dev/peps/pep-0008
    # R like return : checks return values, see https://github.com/afonasev/flake8-return
    # S like security : flake8-bandit plugin is a automated security testing built, see https://github.com/tylerwince/flake8-bandit

# Mypy is a static type checker for Python 3 and Python 2.7, see https://github.com/python/mypy
[mypy]
# Suppresses error messages about imports that cannot be resolved.
ignore_missing_imports = true
# Directs what to do with imports when the imported module is found, see https://mypy.readthedocs.io/en/latest/command_line.html#cmdoption-mypy-follow-imports
follow_imports = skip
# Disallows defining functions without type annotations or with incomplete type annotations.
disallow_untyped_defs = true
# Disallows defining functions with incomplete type annotations.
disallow_incomplete_defs = true
# Reports an error whenever a function with type annotations is decorated with a decorator without annotations.
disallow_untyped_decorators = true
# Warns about casting an expression to its inferred type.
warn_redundant_casts = true
# Causes mypy to suppress errors caused by not being able to fully infer the types of global and class variables.
allow_untyped_globals = true
# Prefixes each error with the relevant context.
show_error_context = true
# Shows column numbers in error messages.
show_column_numbers = true
# Shows error codes in error messages
show_error_codes = true

############################################# Formater ############################################

# Use of black, but this tool don't use setup.cfg, it uses pyproject.toml, see https://github.com/psf/black/issues/65